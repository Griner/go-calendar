// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calendar.proto

package calendar

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CalendarEvent_CalendarEventType int32

const (
	CalendarEvent_TASK     CalendarEvent_CalendarEventType = 0
	CalendarEvent_EVENT    CalendarEvent_CalendarEventType = 1
	CalendarEvent_REMINDER CalendarEvent_CalendarEventType = 2
)

var CalendarEvent_CalendarEventType_name = map[int32]string{
	0: "TASK",
	1: "EVENT",
	2: "REMINDER",
}

var CalendarEvent_CalendarEventType_value = map[string]int32{
	"TASK":     0,
	"EVENT":    1,
	"REMINDER": 2,
}

func (x CalendarEvent_CalendarEventType) String() string {
	return proto.EnumName(CalendarEvent_CalendarEventType_name, int32(x))
}

func (CalendarEvent_CalendarEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{0, 0}
}

type CalendarEvent struct {
	Id                   int64                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 CalendarEvent_CalendarEventType `protobuf:"varint,3,opt,name=type,proto3,enum=calendar.CalendarEvent_CalendarEventType" json:"type,omitempty"`
	StartTime            *timestamp.Timestamp            `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              *timestamp.Timestamp            `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CalendarEvent) Reset()         { *m = CalendarEvent{} }
func (m *CalendarEvent) String() string { return proto.CompactTextString(m) }
func (*CalendarEvent) ProtoMessage()    {}
func (*CalendarEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{0}
}

func (m *CalendarEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalendarEvent.Unmarshal(m, b)
}
func (m *CalendarEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalendarEvent.Marshal(b, m, deterministic)
}
func (m *CalendarEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalendarEvent.Merge(m, src)
}
func (m *CalendarEvent) XXX_Size() int {
	return xxx_messageInfo_CalendarEvent.Size(m)
}
func (m *CalendarEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CalendarEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CalendarEvent proto.InternalMessageInfo

func (m *CalendarEvent) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CalendarEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CalendarEvent) GetType() CalendarEvent_CalendarEventType {
	if m != nil {
		return m.Type
	}
	return CalendarEvent_TASK
}

func (m *CalendarEvent) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *CalendarEvent) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

type CalendarEventId struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalendarEventId) Reset()         { *m = CalendarEventId{} }
func (m *CalendarEventId) String() string { return proto.CompactTextString(m) }
func (*CalendarEventId) ProtoMessage()    {}
func (*CalendarEventId) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{1}
}

func (m *CalendarEventId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalendarEventId.Unmarshal(m, b)
}
func (m *CalendarEventId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalendarEventId.Marshal(b, m, deterministic)
}
func (m *CalendarEventId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalendarEventId.Merge(m, src)
}
func (m *CalendarEventId) XXX_Size() int {
	return xxx_messageInfo_CalendarEventId.Size(m)
}
func (m *CalendarEventId) XXX_DiscardUnknown() {
	xxx_messageInfo_CalendarEventId.DiscardUnknown(m)
}

var xxx_messageInfo_CalendarEventId proto.InternalMessageInfo

func (m *CalendarEventId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CalendarServiceError struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalendarServiceError) Reset()         { *m = CalendarServiceError{} }
func (m *CalendarServiceError) String() string { return proto.CompactTextString(m) }
func (*CalendarServiceError) ProtoMessage()    {}
func (*CalendarServiceError) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{2}
}

func (m *CalendarServiceError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalendarServiceError.Unmarshal(m, b)
}
func (m *CalendarServiceError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalendarServiceError.Marshal(b, m, deterministic)
}
func (m *CalendarServiceError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalendarServiceError.Merge(m, src)
}
func (m *CalendarServiceError) XXX_Size() int {
	return xxx_messageInfo_CalendarServiceError.Size(m)
}
func (m *CalendarServiceError) XXX_DiscardUnknown() {
	xxx_messageInfo_CalendarServiceError.DiscardUnknown(m)
}

var xxx_messageInfo_CalendarServiceError proto.InternalMessageInfo

func (m *CalendarServiceError) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CalendarServiceError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("calendar.CalendarEvent_CalendarEventType", CalendarEvent_CalendarEventType_name, CalendarEvent_CalendarEventType_value)
	proto.RegisterType((*CalendarEvent)(nil), "calendar.CalendarEvent")
	proto.RegisterType((*CalendarEventId)(nil), "calendar.CalendarEventId")
	proto.RegisterType((*CalendarServiceError)(nil), "calendar.CalendarServiceError")
}

func init() { proto.RegisterFile("calendar.proto", fileDescriptor_e3d25d49f056cdb2) }

var fileDescriptor_e3d25d49f056cdb2 = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0xcf, 0x4e, 0xea, 0x40,
	0x18, 0xc5, 0x6f, 0x4b, 0xb9, 0x94, 0x8f, 0x7b, 0xb9, 0xdc, 0x89, 0x89, 0xb5, 0x0b, 0xad, 0x5d,
	0xd5, 0x4d, 0x49, 0x30, 0x9a, 0xb8, 0xd0, 0xc4, 0x40, 0x55, 0x62, 0x64, 0x51, 0xaa, 0x5b, 0x33,
	0x30, 0x9f, 0xa4, 0x09, 0xfd, 0x93, 0xe9, 0x88, 0xe1, 0x5d, 0x7c, 0x00, 0x1f, 0xd3, 0xb4, 0x65,
	0x34, 0x95, 0x20, 0x0b, 0x77, 0x73, 0xda, 0x73, 0xce, 0xfc, 0x72, 0x06, 0xda, 0x53, 0x3a, 0xc7,
	0x98, 0x51, 0xee, 0xa6, 0x3c, 0x11, 0x09, 0xd1, 0xa5, 0x36, 0x0f, 0x66, 0x49, 0x32, 0x9b, 0x63,
	0xb7, 0xf8, 0x3e, 0x79, 0x7e, 0xea, 0x8a, 0x30, 0xc2, 0x4c, 0xd0, 0x28, 0x2d, 0xad, 0xf6, 0xab,
	0x0a, 0x7f, 0xfb, 0x2b, 0xb7, 0xb7, 0xc0, 0x58, 0x90, 0x36, 0xa8, 0x21, 0x33, 0x14, 0x4b, 0x71,
	0x6a, 0xbe, 0x1a, 0x32, 0x42, 0x40, 0x8b, 0x69, 0x84, 0x86, 0x6a, 0x29, 0x4e, 0xd3, 0x2f, 0xce,
	0xe4, 0x1c, 0x34, 0xb1, 0x4c, 0xd1, 0xa8, 0x59, 0x8a, 0xd3, 0xee, 0x1d, 0xb9, 0x1f, 0xf7, 0x57,
	0xaa, 0xaa, 0x2a, 0x58, 0xa6, 0xe8, 0x17, 0x31, 0x72, 0x06, 0x90, 0x09, 0xca, 0xc5, 0x63, 0x4e,
	0x63, 0x68, 0x96, 0xe2, 0xb4, 0x7a, 0xa6, 0x5b, 0xa2, 0xba, 0x12, 0xd5, 0x0d, 0x24, 0xaa, 0xdf,
	0x2c, 0xdc, 0xb9, 0x26, 0x27, 0xa0, 0x63, 0xcc, 0xca, 0x60, 0x7d, 0x6b, 0xb0, 0x81, 0x31, 0xcb,
	0x95, 0x7d, 0x0a, 0xff, 0xd7, 0x60, 0x88, 0x0e, 0x5a, 0x70, 0x39, 0xbe, 0xed, 0xfc, 0x22, 0x4d,
	0xa8, 0x7b, 0x0f, 0xde, 0x28, 0xe8, 0x28, 0xe4, 0x0f, 0xe8, 0xbe, 0x77, 0x37, 0x1c, 0x0d, 0x3c,
	0xbf, 0xa3, 0xda, 0x87, 0xf0, 0xaf, 0x92, 0x1b, 0xb2, 0xaf, 0xfb, 0xd8, 0x03, 0xd8, 0x91, 0x96,
	0x31, 0xf2, 0x45, 0x38, 0x45, 0x8f, 0xf3, 0x84, 0xe7, 0xbb, 0x4d, 0x13, 0x86, 0x2b, 0x67, 0x71,
	0x26, 0x06, 0x34, 0x22, 0xcc, 0x32, 0x3a, 0x93, 0x73, 0x4a, 0xd9, 0x7b, 0x53, 0x3f, 0x6f, 0x5a,
	0xd5, 0x90, 0x3e, 0xe8, 0x23, 0x7c, 0x29, 0x5f, 0x65, 0x77, 0xc3, 0xc6, 0xe6, 0xfe, 0xfa, 0x8f,
	0x0a, 0xc6, 0x15, 0xb4, 0xee, 0x53, 0x46, 0x05, 0xfe, 0xb0, 0xe7, 0x02, 0xf4, 0x6b, 0x14, 0x65,
	0xc9, 0xde, 0x86, 0x92, 0x21, 0x33, 0x37, 0xf5, 0x93, 0x1b, 0x68, 0x0d, 0x70, 0x8e, 0x92, 0xe3,
	0x9b, 0x8a, 0x2d, 0x24, 0x93, 0xdf, 0xc5, 0x43, 0x1f, 0xbf, 0x07, 0x00, 0x00, 0xff, 0xff, 0x89,
	0x85, 0xb6, 0x8e, 0xf6, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalendarServiceClient is the client API for CalendarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalendarServiceClient interface {
	NewEvent(ctx context.Context, in *CalendarEvent, opts ...grpc.CallOption) (*CalendarServiceError, error)
	UpdateEvent(ctx context.Context, in *CalendarEvent, opts ...grpc.CallOption) (*CalendarServiceError, error)
	GetEvent(ctx context.Context, in *CalendarEventId, opts ...grpc.CallOption) (*CalendarEvent, error)
	DeleteEvent(ctx context.Context, in *CalendarEventId, opts ...grpc.CallOption) (*CalendarServiceError, error)
}

type calendarServiceClient struct {
	cc *grpc.ClientConn
}

func NewCalendarServiceClient(cc *grpc.ClientConn) CalendarServiceClient {
	return &calendarServiceClient{cc}
}

func (c *calendarServiceClient) NewEvent(ctx context.Context, in *CalendarEvent, opts ...grpc.CallOption) (*CalendarServiceError, error) {
	out := new(CalendarServiceError)
	err := c.cc.Invoke(ctx, "/calendar.CalendarService/NewEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) UpdateEvent(ctx context.Context, in *CalendarEvent, opts ...grpc.CallOption) (*CalendarServiceError, error) {
	out := new(CalendarServiceError)
	err := c.cc.Invoke(ctx, "/calendar.CalendarService/UpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) GetEvent(ctx context.Context, in *CalendarEventId, opts ...grpc.CallOption) (*CalendarEvent, error) {
	out := new(CalendarEvent)
	err := c.cc.Invoke(ctx, "/calendar.CalendarService/GetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) DeleteEvent(ctx context.Context, in *CalendarEventId, opts ...grpc.CallOption) (*CalendarServiceError, error) {
	out := new(CalendarServiceError)
	err := c.cc.Invoke(ctx, "/calendar.CalendarService/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarServiceServer is the server API for CalendarService service.
type CalendarServiceServer interface {
	NewEvent(context.Context, *CalendarEvent) (*CalendarServiceError, error)
	UpdateEvent(context.Context, *CalendarEvent) (*CalendarServiceError, error)
	GetEvent(context.Context, *CalendarEventId) (*CalendarEvent, error)
	DeleteEvent(context.Context, *CalendarEventId) (*CalendarServiceError, error)
}

// UnimplementedCalendarServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCalendarServiceServer struct {
}

func (*UnimplementedCalendarServiceServer) NewEvent(ctx context.Context, req *CalendarEvent) (*CalendarServiceError, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewEvent not implemented")
}
func (*UnimplementedCalendarServiceServer) UpdateEvent(ctx context.Context, req *CalendarEvent) (*CalendarServiceError, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (*UnimplementedCalendarServiceServer) GetEvent(ctx context.Context, req *CalendarEventId) (*CalendarEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (*UnimplementedCalendarServiceServer) DeleteEvent(ctx context.Context, req *CalendarEventId) (*CalendarServiceError, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}

func RegisterCalendarServiceServer(s *grpc.Server, srv CalendarServiceServer) {
	s.RegisterService(&_CalendarService_serviceDesc, srv)
}

func _CalendarService_NewEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalendarEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).NewEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.CalendarService/NewEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).NewEvent(ctx, req.(*CalendarEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalendarEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.CalendarService/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).UpdateEvent(ctx, req.(*CalendarEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalendarEventId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.CalendarService/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).GetEvent(ctx, req.(*CalendarEventId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalendarEventId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.CalendarService/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).DeleteEvent(ctx, req.(*CalendarEventId))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalendarService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calendar.CalendarService",
	HandlerType: (*CalendarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewEvent",
			Handler:    _CalendarService_NewEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _CalendarService_UpdateEvent_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _CalendarService_GetEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _CalendarService_DeleteEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calendar.proto",
}
